#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('the-graph-backend:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
// var privateKey = require('fs').readFileSync('/etc/letsencrypt/live/polycapa.me/privkey.pem');
// var certificate = require('fs').readFileSync('/etc/letsencrypt/live/polycapa.me/cert.pem');
// var credentials = {
//     key: privateKey,
//     cert: certificate
// };

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')
    .listen(server);

/**
 * Handle sockets
 */

var graph;
var initGraph = false;
var backupDir = './backup/';

try {
    fs.accessSync('graph.json');
    var contents = fs.readFileSync(backupDir + 'graph.json', 'utf8');
    contents = JSON.parse(contents);

    graph = contents;
} catch (e) {
    initGraph = true;
}

if (initGraph) {
    graph = null;
}

console.log(graph);

setInterval(function() {
    saveGraph(graph);
}, 120000);

var connectedUsers = 0;

io.on('connection', function(socket) {
    console.log('User ' + socket.id + ' connected');
    connectedUsers++;
    socket.emit('connected', graph);
    io.emit('user-number', connectedUsers);

    socket.on('change-graph', function(data) {
        console.log('add-node', data);
        graph = data;
        socket.broadcast.emit('graph-changed', data);
    });

    socket.on('disconnect', function() {
        console.log('User ' + socket.id + ' disconnected');
        connectedUsers--;
        io.emit('user-number', connectedUsers);
    });
});


function saveGraph(graph) {
    var date = new Date();
    var string = date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear() + '-' + date.getHours() + '-' + date.getMinutes() + '-' + date.getSeconds();
    var oldFileName = 'graph' + '-' + string + '.json';
    fs.rename(backupDir + 'graph.json', backupDir + oldFileName, function(err) {
        if (err) {
            console.log('ERROR : ' + err);
        }
        fs.writeFile(backupDir + 'graph.json', JSON.stringify(graph), function(err) {
            if (err) {
                return console.log(err);
            }
        });
    })
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
